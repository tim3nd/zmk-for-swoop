/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 21>;
            layers = <0>;
        };

        blackslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <28 29>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <20 21>;
            layers = <1>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <25 26 27>;
            layers = <2>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        ltc: layer-tap_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER-TAP_CUSTOM";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        basic {
            bindings = <
&kp Q           &kp W               &kp E           &kp R             &kp T           &kp Y      &kp U              &kp I            &kp O                &kp P
&hm LEFT_ALT A  &hm LEFT_CONTROL S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G           &kp H      &hm RIGHT_SHIFT J  &hm RIGHT_GUI K  &hm RIGHT_CONTROL L  &hm RIGHT_ALT SEMICOLON
&kp Z           &kp X               &kp C           &kp V             &kp B           &kp N      &kp M              &kp COMMA        &kp PERIOD           &kp SLASH
                                    &kp ESCAPE      &kp TAB           &ltc 1 SPACE    &kp ENTER  &kp BACKSPACE      &mo 2
            >;
        };

        sym {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6   &kp NUMBER_7          &kp NUMBER_8           &kp NUMBER_9       &kp NUMBER_0
&kp PLUS      &kp UNDERSCORE  &kp MINUS     &kp EQUAL     &kp TILDE       &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE     &kp RIGHT_BRACE
&kp CARET     &kp DOLLAR      &kp HASH      &kp STAR      &kp AT_SIGN     &kp AMPERSAND  &kp EXCLAMATION       &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp PERCENT
                              &trans        &trans        &trans          &trans         &trans                &trans
            >;
        };

        func {
            bindings = <
&kp F1             &kp F2           &kp F3      &kp F4            &kp F5                  &kp F6          &kp F7          &kp F8        &kp F9     &kp F10
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &kp C_PLAY_PAUSE  &kp C_BRIGHTNESS_INC    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&kp F11            &kp F12          &kp C_PREV  &kp C_NEXT        &kp C_BRIGHTNESS_DEC    &trans          &trans          &trans        &trans     &trans
                                    &mo 3       &trans            &trans                  &trans          &trans          &trans
            >;
        };

        ctrl {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR  &trans  &trans  &trans  &bt BT_CLR_ALL
&trans        &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans
                            &trans        &trans        &trans          &trans      &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
